openapi: 3.0.3
info:
  title: User API
  summary: This is the API of the User service
  description: This is the API of the User service, which handles user-related operations like fetching user reservations and movies.
  contact:
    name: Helene Coullon
    url: https://helene-coullon.fr/
    email: helene.coullon@imt-atlantique.fr
  license:
    name: GPL v3
    url: https://www.gnu.org/licenses/gpl-3.0.en.html
  version: 1.0.0
tags:
- name: users
  description: Operations related to users
- name: developers
  description: Operations available to developers
paths:
  /:
    get:
      tags:
      - developers
      summary: Home page of the service
      description: |
        Nothing to do
      operationId: home
      responses:
        "200":
          description: Welcome message
          content:
            text/html:
              schema:
                type: string
                example: <h1 style='color:blue'>Welcome to the User service!</h1>

  /users/{userId}/reservations:
    get:
      tags:
      - users
      summary: Get user reservations
      description: Retrieves all reservations for a given user by their userId.
      operationId: get_user_reservations
      parameters:
      - name: userId
        in: path
        description: ID of the user to retrieve reservations for.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: List of reservations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReservationsResponse'
        "404":
          description: User not found

  /users/{userId}/movies:
    get:
      tags:
      - users
      summary: Get reserved movies by user
      description: Retrieves information about movies that a user has reserved.
      operationId: get_user_movies
      parameters:
      - name: userId
        in: path
        description: ID of the user.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: List of movies reserved by the user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserMoviesResponse'
        "404":
          description: No movies found for the user

  /users/{userId}:
      put:
        tags:
        - users
        summary: Update user information
        description: Update the information of a specific user by their userId.
        operationId: update_user
        parameters:
        - name: userId
          in: path
          description: The ID of the user to update.
          required: true
          schema:
            type: string
        requestBody:
          description: User object with updated values.
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: "Chris Rivers"
                  last_active:
                    type: integer
                    description: Timestamp of the last activity.
                    example: 1360031010
        responses:
          "200":
            description: The user was updated successfully.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    id:
                      type: string
                      example: "michael_scott"
                    name:
                      type: string
                      example: "Michael Scott"
                    last_active:
                      type: integer
                      description: Timestamp of the last activity.
                      example: 1360031625
          "400":
            description: Bad request, usually due to missing data.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                      example: "No data provided"
          "404":
            description: User not found.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                      example: "User not found"

      delete:
        tags:
        - users
        summary: Delete a user
        description: Delete a user from the system by their userId.
        operationId: delete_user
        parameters:
        - name: userId
          in: path
          description: The ID of the user to delete.
          required: true
          schema:
            type: string
        responses:
          "200":
            description: The user was deleted successfully.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: "User deleted"
          "404":
            description: User not found.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                      example: "User not found"

components:
  schemas:
    ReservationsResponse:
      type: object
      properties:
        userId:
          type: string
          example: "12345"
        dates:
          type: array
          items:
            type: object
            properties:
              date:
                type: string
                example: "2023-10-10"
              movies:
                type: array
                items:
                  type: string
                  example: "39ab85e5-5e8e-4dc5-afea-65dc368bd7ab"

    UserMoviesResponse:
      type: object
      properties:
        userId:
          type: string
          example: "12345"
        movies:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/MovieItem'

    MovieItem:
      type: object
      required:
        - title
        - rating
        - director
        - id
      properties:
        title:
          type: string
          example: The Martian
        rating:
          type: integer
          example: 7
        director:
          type: string
          example: Paul McGuigan
        id:
          type: string
          example: "39ab85e5-5e8e-4dc5-afea-65dc368bd7ab"

    AvailabilityCheckRequest:
      type: object
      required:
        - date
        - movieid
      properties:
        date:
          type: string
          example: "2023-10-10"
        movieid:
          type: string
          example: "39ab85e5-5e8e-4dc5-afea-65dc368bd7ab"

    AvailabilityResponse:
      type: object
      properties:
        available:
          type: boolean
          example: true
        movieid:
          type: string
          example: "39ab85e5-5e8e-4dc5-afea-65dc368bd7ab"
        date:
          type: string
          example: "2023-10-10"
